/**
 * \file
 * Functions and types for CRC checks.
 *
 * Generated on Sat Dec  9 16:03:14 2017
 * by pycrc v0.9.1, https://pycrc.org
 * using the configuration:
 *  - Width         = 8
 *  - Poly          = 0xa6
 *  - XorIn         = 0x00
 *  - ReflectIn     = False
 *  - XorOut        = 0x00
 *  - ReflectOut    = False
 *  - Algorithm     = table-driven
 *
 * This file defines the functions crc_init(), crc_update() and crc_finalize().
 *
 * The crc_init() function returns the inital \c crc value and must be called
 * before the first call to crc_update().
 * Similarly, the crc_finalize() function must be called after the last call
 * to crc_update(), before the \c crc is being used.
 * is being used.
 *
 * The crc_update() function can be called any number of times (including zero
 * times) in between the crc_init() and crc_finalize() calls.
 *
 * This pseudo-code shows an example usage of the API:
 * \code{.c}
 * crc_t crc;
 * unsigned char data[MAX_DATA_LEN];
 * size_t data_len;
 *
 * crc = crc_init();
 * while ((data_len = read_data(data, MAX_DATA_LEN)) > 0) {
 *     crc = crc_update(crc, data, data_len);
 * }
 * crc = crc_finalize(crc);
 * \endcode
 */
#ifndef CRC_H
#define CRC_H

#include <stdlib.h>
#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * The definition of the used algorithm.
 *
 * This is not used anywhere in the generated code, but it may be used by the
 * application code to call algorithm-specific code, if desired.
 */
#define CRC_ALGO_TABLE_DRIVEN 1


/**
 * The type of the CRC values.
 *
 * This type must be big enough to contain at least 8 bits.
 */
typedef uint_fast8_t crc_t;

/**
 * Static table used for the table_driven implementation.
 */
static const crc_t crc_table[256] = {
        0x00, 0xa6, 0xea, 0x4c, 0x72, 0xd4, 0x98, 0x3e, 0xe4, 0x42, 0x0e, 0xa8, 0x96, 0x30, 0x7c, 0xda,
        0x6e, 0xc8, 0x84, 0x22, 0x1c, 0xba, 0xf6, 0x50, 0x8a, 0x2c, 0x60, 0xc6, 0xf8, 0x5e, 0x12, 0xb4,
        0xdc, 0x7a, 0x36, 0x90, 0xae, 0x08, 0x44, 0xe2, 0x38, 0x9e, 0xd2, 0x74, 0x4a, 0xec, 0xa0, 0x06,
        0xb2, 0x14, 0x58, 0xfe, 0xc0, 0x66, 0x2a, 0x8c, 0x56, 0xf0, 0xbc, 0x1a, 0x24, 0x82, 0xce, 0x68,
        0x1e, 0xb8, 0xf4, 0x52, 0x6c, 0xca, 0x86, 0x20, 0xfa, 0x5c, 0x10, 0xb6, 0x88, 0x2e, 0x62, 0xc4,
        0x70, 0xd6, 0x9a, 0x3c, 0x02, 0xa4, 0xe8, 0x4e, 0x94, 0x32, 0x7e, 0xd8, 0xe6, 0x40, 0x0c, 0xaa,
        0xc2, 0x64, 0x28, 0x8e, 0xb0, 0x16, 0x5a, 0xfc, 0x26, 0x80, 0xcc, 0x6a, 0x54, 0xf2, 0xbe, 0x18,
        0xac, 0x0a, 0x46, 0xe0, 0xde, 0x78, 0x34, 0x92, 0x48, 0xee, 0xa2, 0x04, 0x3a, 0x9c, 0xd0, 0x76,
        0x3c, 0x9a, 0xd6, 0x70, 0x4e, 0xe8, 0xa4, 0x02, 0xd8, 0x7e, 0x32, 0x94, 0xaa, 0x0c, 0x40, 0xe6,
        0x52, 0xf4, 0xb8, 0x1e, 0x20, 0x86, 0xca, 0x6c, 0xb6, 0x10, 0x5c, 0xfa, 0xc4, 0x62, 0x2e, 0x88,
        0xe0, 0x46, 0x0a, 0xac, 0x92, 0x34, 0x78, 0xde, 0x04, 0xa2, 0xee, 0x48, 0x76, 0xd0, 0x9c, 0x3a,
        0x8e, 0x28, 0x64, 0xc2, 0xfc, 0x5a, 0x16, 0xb0, 0x6a, 0xcc, 0x80, 0x26, 0x18, 0xbe, 0xf2, 0x54,
        0x22, 0x84, 0xc8, 0x6e, 0x50, 0xf6, 0xba, 0x1c, 0xc6, 0x60, 0x2c, 0x8a, 0xb4, 0x12, 0x5e, 0xf8,
        0x4c, 0xea, 0xa6, 0x00, 0x3e, 0x98, 0xd4, 0x72, 0xa8, 0x0e, 0x42, 0xe4, 0xda, 0x7c, 0x30, 0x96,
        0xfe, 0x58, 0x14, 0xb2, 0x8c, 0x2a, 0x66, 0xc0, 0x1a, 0xbc, 0xf0, 0x56, 0x68, 0xce, 0x82, 0x24,
        0x90, 0x36, 0x7a, 0xdc, 0xe2, 0x44, 0x08, 0xae, 0x74, 0xd2, 0x9e, 0x38, 0x06, 0xa0, 0xec, 0x4a
};

/**
 * Calculate the initial crc value.
 *
 * \return     The initial crc value.
 */
static inline crc_t crc_init(void)
{
    return 0x00;
}


/**
 * Update the crc value with new data.
 *
 * \param[in] crc      The current crc value.
 * \param[in] data     Pointer to a buffer of \a data_len bytes.
 * \param[in] data_len Number of bytes in the \a data buffer.
 * \return             The updated crc value.
 */
crc_t crc_update(crc_t crc, const void *data, size_t data_len);


/**
 * Calculate the final crc value.
 *
 * \param[in] crc  The current crc value.
 * \return     The final crc value.
 */
static inline crc_t crc_finalize(crc_t crc)
{
    return crc;
}


#ifdef __cplusplus
}           /* closing brace for extern "C" */
#endif

#endif      /* CRC_H */
